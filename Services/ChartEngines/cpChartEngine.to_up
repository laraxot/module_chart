<?php
/*
!!!!!!!
INCOMPATIBLE CON JPGRAPH

composer require szymach/c-pchart
*/

/*
 * https://github.com/szymach/c-pchart.
 * https://apitemplate.io/blog/embedding-charts-into-a-pdf/
 * https://codepen.io/jordanwillis/pen/peqVOM.
 * https://github.com/kartik-v/mpdf/blob/master/graph.php.
 * https://mpdf.github.io/reference/mpdf-variables/usegraphs.html.
 * https://keepcoding.ehsanabbasi.com/php/convert-google-chart-to-png-and-pdf/.
 * https://codingexplained.com/coding/php/using-google-visualization-with-wkhtmltopdf.
 * https://www.webslesson.info/2018/07/how-to-convert-google-chart-to-pdf-using-php.html.
 * https://developers.google.com/chart/interactive/docs/printing.
*/

declare(strict_types=1);

namespace Modules\Chart\Services\ChartEngines;

use CpChart\Chart\Pie;
use CpChart\Data;
use CpChart\Image;

/**
 * ---.
 * */
class cpChartEngine extends BaseChartEngine {
    public function cpChart() {
        /* Create and populate the Data object */
        $data = new \CpChart\Data();
        $data->addPoints([13251, 4118, 3087, 1460, 1248, 156, 26, 9, 8], 'Hits');
        $data->setAxisName(0, 'Hits');
        $data->addPoints(['Firefox', 'Chrome', 'Internet Explorer', 'Opera', 'Safari', 'Mozilla', 'SeaMonkey', 'Camino', 'Lunascape'], 'Browsers');
        $data->setSerieDescription('Browsers', 'Browsers');
        $data->setAbscissa('Browsers');

        /* Create the Image object */
        $image = new \CpChart\Image(500, 500, $data);
        $image->drawGradientArea(0, 0, 500, 500, DIRECTION_VERTICAL, [
            'StartR' => 240,
            'StartG' => 240,
            'StartB' => 240,
            'EndR' => 180,
            'EndG' => 180,
            'EndB' => 180,
            'Alpha' => 100,
        ]);
        $image->drawGradientArea(0, 0, 500, 500, DIRECTION_HORIZONTAL, [
            'StartR' => 240,
            'StartG' => 240,
            'StartB' => 240,
            'EndR' => 180,
            'EndG' => 180,
            'EndB' => 180,
            'Alpha' => 20,
        ]);
        $image->setFontProperties(['FontName' => 'pf_arma_five.ttf', 'FontSize' => 6]);

        /* Draw the chart scale */
        $image->setGraphArea(100, 30, 480, 480);
        $image->drawScale([
            'CycleBackground' => true,
            'DrawSubTicks' => true,
            'GridR' => 0,
            'GridG' => 0,
            'GridB' => 0,
            'GridAlpha' => 10,
            'Pos' => SCALE_POS_TOPBOTTOM,
        ]);

        /* Turn on shadow computing */
        $image->setShadow(true, ['X' => 1, 'Y' => 1, 'R' => 0, 'G' => 0, 'B' => 0, 'Alpha' => 10]);

        /* Draw the chart */
        $image->drawBarChart(['DisplayPos' => LABEL_POS_INSIDE, 'DisplayValues' => true, 'Rounded' => true, 'Surrounding' => 30]);

        /* Write the legend */
        $image->drawLegend(570, 215, ['Style' => LEGEND_NOBORDER, 'Mode' => LEGEND_HORIZONTAL]);

        /* Render the picture (choose the best way) */
        $image->autoOutput('example.drawBarChart.vertical.png');
    }

    public function cpChart1() {
        /* Create and populate the Data object */
        $data = new Data();
        $data->addPoints([50, 2, 3, 4, 7, 10, 25, 48, 41, 10], 'ScoreA');
        $data->setSerieDescription('ScoreA', 'Application A');

        /* Define the absissa serie */
        $data->addPoints(['A0', 'B1', 'C2', 'D3', 'E4', 'F5', 'G6', 'H7', 'I8', 'J9'], 'Labels');
        $data->setAbscissa('Labels');

        /* Create the Image object */
        $image = new Image(300, 260, $data);

        /* Draw a solid background */
        $settings = ['R' => 170, 'G' => 183, 'B' => 87, 'Dash' => 1, 'DashR' => 190, 'DashG' => 203, 'DashB' => 107];
        $image->drawFilledRectangle(0, 0, 300, 300, $settings);

        /* Overlay with a gradient */
        $image->drawGradientArea(0, 0, 300, 260, DIRECTION_VERTICAL, [
            'StartR' => 219,
            'StartG' => 231,
            'StartB' => 139,
            'EndR' => 1,
            'EndG' => 138,
            'EndB' => 68,
            'Alpha' => 50,
        ]);
        $image->drawGradientArea(0, 0, 300, 20, DIRECTION_VERTICAL, ['StartR' => 0, 'StartG' => 0,
            'StartB' => 0, 'EndR' => 50, 'EndG' => 50, 'EndB' => 50, 'Alpha' => 100, ]);

        /* Add a border to the picture */
        $image->drawRectangle(0, 0, 299, 259, ['R' => 0, 'G' => 0, 'B' => 0]);

        /* Write the picture title */
        $image->setFontProperties(['FontName' => 'Silkscreen.ttf', 'FontSize' => 6]);
        $image->drawText(10, 13, 'pPie - Draw 2D ring charts', ['R' => 255, 'G' => 255, 'B' => 255]);

        /* Set the default font properties */
        $image->setFontProperties([
            'FontName' => 'Forgotte.ttf',
            'FontSize' => 10,
            'R' => 80,
            'G' => 80,
            'B' => 80,
        ]);

        /* Enable shadow computing */
        $image->setShadow(true, ['X' => 2, 'Y' => 2, 'R' => 0, 'G' => 0, 'B' => 0, 'Alpha' => 50]);

        /* Create the pPie object */
        $pieChart = new Pie($image, $data);

        /* Draw an AA pie chart */
        $pieChart->draw2DRing(160, 140, ['DrawLabels' => true, 'LabelStacked' => true, 'Border' => true]);

        /* Write the legend box */
        $image->setShadow(false);
        $pieChart->drawPieLegend(15, 40, ['Alpha' => 20]);

        /* Render the picture (choose the best way) */
        $image->autoOutput('example.draw2DRing.png');
    }
}
